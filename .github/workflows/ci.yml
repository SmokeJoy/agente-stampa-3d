name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-test:
    name: Lint, Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessario per la verifica della firma GPG

      - name: Devcontainer CI Action (pinned - check)
        uses: devcontainers/ci@0.3.2
        with:
          runCmd: "echo 'devcontainer check OK'"

      - name: Setup Git for GPG signing
        run: |
          git config --global user.name "Dev AI"
          git config --global user.email "dev.ai@example.com"
          # In un ambiente reale, qui verrebbero configurate le chiavi GPG importandole da secrets
          # Esempio:
          # echo "${{ secrets.GPG_PRIVATE_KEY }}" > private.key
          # gpg --import private.key
          # git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
          # git config --global commit.gpgsign true

      - name: Run in Dev Container (pinned - main execution)
        uses: devcontainers/ci@0.3.2
        with:
          push: never # Non pushare l'immagine buildata automaticamente
          cacheFrom: type=gha,scope=${{ github.workflow }}
          cacheTo: type=gha,scope=${{ github.workflow }},mode=max
          runCmd: |
            echo "Installing dependencies using Poetry..."
            poetry install --no-interaction --no-root
            echo "Running pre-commit hooks..."
            pre-commit run --all-files --show-diff-on-failure
            echo "Running tests with Pytest and generating coverage reports..."
            pytest -v --cov=agente_stampa_3d --cov-report=xml --cov-report=html tests/
            echo "Running dialect schema validation test..."
            pytest -q tests/spec/test_schema_dialect.py
            echo "Checking Spectral linting on OpenAPI schema..."
            spectral lint openapi_3_1_demo.json > spectral_results.log
            echo "Building package..."
            poetry build | tee poetry_build.log
            echo "Testing installation from built package..."
            pip install dist/*.whl --force-reinstall
            
      - name: Upload test coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-reports
          path: |
            coverage.xml
            htmlcov/
            
      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            spectral_results.log
            poetry_build.log
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.whl
            dist/*.tar.gz

  gpg-verification:
    name: GPG Verification
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessario per recuperare la history dei commit

      - name: Set up GPG suite
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY || '' }}
          passphrase: ${{ secrets.GPG_PASSPHRASE || '' }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          
      - name: Check commit signatures
        run: |
          echo "Checking commits for GPG signatures..."
          if [ "${{ secrets.GPG_PRIVATE_KEY }}" != "" ]; then
            # Verifica ogni commit nel PR
            git log --format="%H %GS" origin/${{ github.base_ref }}..HEAD | grep "UNKNOWN\|BAD" && exit 1 || echo "All commits are signed"
          else
            echo "GPG verification skipped - No GPG key configured in secrets"
          fi
